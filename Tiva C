//Librerías
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include "driverlib/systick.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
#include "driverlib/debug.h"
#include "driverlib/adc.h"
#include "utils/ustdlib.h"

#define XTAL 16000000 //Reloj externo de 16MHz

//Variables
int8_t parqueo1, parqueo2, parqueo3, parqueo4; //Parqueos
char parqueos;

int Fs = 40000;
uint32_t i;
uint32_t s = 0;

//Declaración de funciones
void setup(void);
void setupUART1(void);
void ADCSetup(void);
void ObtenerMuestra(void);
void ObtenerMuestra2(void);
void ObtenerMuestra3(void);
void ObtenerMuestra4(void);
void delay1ms(void);
void delay(uint32_t msec);

int main(void){
    //Setup y setup del UART
    setup();
    setupUART1();
    ADCSetup();
    while (1){

    //Moviendo bits para concatenarlos luego
    parqueo2 = parqueo2 << 1;
    parqueo3 = parqueo3 << 2;
    parqueo4 = parqueo4 << 3;
    parqueos = parqueo4 | parqueo3 | parqueo2 | parqueo1; //Preparando el byte para enviar al ESP32
    UARTCharPutNonBlocking(UART1_BASE, parqueos); //Enviando el byte al ESP32 por medio del UART1

    ADCIntRegister(ADC0_BASE, 1, ObtenerMuestra2);
    //Habilitar interrupción por parte del NVIC
    IntEnable(INT_ADC0SS1);

    ADCIntRegister(ADC0_BASE, 0, ObtenerMuestra);
     //Habilitar interrupción por parte del NVIC
     IntEnable(INT_ADC0SS0);

     ADCIntRegister(ADC0_BASE, 2, ObtenerMuestra3);
     //Habilitar interrupción por parte del NVIC
     IntEnable(INT_ADC0SS2);

     ADCIntRegister(ADC0_BASE, 3, ObtenerMuestra4);
     //Habilitar interrupción por parte del NVIC
     IntEnable(INT_ADC0SS3);

    IntMasterEnable();

    delay(500);


    }
}

void setup(void){
    SysCtlClockSet(SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL | SYSCTL_XTAL_16MHZ | SYSCTL_OSC_MAIN); //Reloj a 40MHz
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB); //Habilitando el puerto B
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB)); //Esperar la inicialización del puerto
    IntMasterEnable(); //Habilitando interrupciones globales
}

void ADCSetup(void){
    //Establecer reloj del microcontrolador
        SysCtlClockSet(SYSCTL_XTAL_16MHZ|SYSCTL_SYSDIV_5);
        //Habilitar LEDs
        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);

        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
        GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);

        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
        GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);

        //Habilitar Temporizador 0
        SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
        //Configurar temporizador como periódico
        TimerConfigure(TIMER0_BASE, TIMER_CFG_A_PERIODIC);
        //Cargar el valor que contará el temporizador
        TimerLoadSet(TIMER0_BASE, TIMER_A, SysCtlClockGet()/Fs);
        //Habilitar disparador de ADC por temporizador
        TimerControlTrigger(TIMER0_BASE, TIMER_A, true);
        TimerEnable(TIMER0_BASE, TIMER_A);

        ///Habilitar ADC
        SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
        //Habilitar pin de entrada analógica
        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
        GPIOPinTypeADC(GPIO_PORTB_BASE, GPIO_PIN_4);
        GPIOPadConfigSet(GPIO_PORTB_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
        //Configurar secuencia de muestreo
        ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_TIMER, 1);
        ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_CH11|ADC_CTL_IE|ADC_CTL_END);
        ADCSequenceEnable(ADC0_BASE, 1);
        //Habilitar interrupción por parte del ADC
        ADCIntEnable(ADC0_BASE, 1);


        //Habilitar Temporizador 1
        SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);
        //Configurar temporizador como periódico
        TimerConfigure(TIMER1_BASE, TIMER_CFG_A_PERIODIC);
        //Cargar el valor que contará el temporizador
        TimerLoadSet(TIMER1_BASE, TIMER_A, SysCtlClockGet()/Fs);
        //Habilitar disparador de ADC por temporizador
        TimerControlTrigger(TIMER1_BASE, TIMER_A, true);
        TimerEnable(TIMER1_BASE, TIMER_A);

        //Habilitar ADC
        SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
        //Habilitar pin de entrada analógica
        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
        GPIOPinTypeADC(GPIO_PORTB_BASE, GPIO_PIN_5);
        GPIOPadConfigSet(GPIO_PORTB_BASE, GPIO_PIN_5, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
        //Configurar secuencia de muestreo
        ADCSequenceConfigure(ADC0_BASE, 0, ADC_TRIGGER_TIMER, 1);
        ADCSequenceStepConfigure(ADC0_BASE, 0, 0, ADC_CTL_CH10|ADC_CTL_IE|ADC_CTL_END);
        ADCSequenceEnable(ADC0_BASE, 0);
        //Habilitar interrupción por parte del ADC
        ADCIntEnable(ADC0_BASE, 0);

        //Habilitar Temporizador 2
        SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);
        //Configurar temporizador como periódico
        TimerConfigure(TIMER2_BASE, TIMER_CFG_A_PERIODIC);
        //Cargar el valor que contará el temporizador
        TimerLoadSet(TIMER2_BASE, TIMER_A, SysCtlClockGet()/Fs);
        //Habilitar disparador de ADC por temporizador
        TimerControlTrigger(TIMER2_BASE, TIMER_A, true);
        TimerEnable(TIMER2_BASE, TIMER_A);

        //Habilitar ADC
        SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
        //Habilitar pin de entrada analógica
        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
        GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_4);
        GPIOPadConfigSet(GPIO_PORTE_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
        //Configurar secuencia de muestreo
        ADCSequenceConfigure(ADC0_BASE, 2, ADC_TRIGGER_TIMER, 1);
        ADCSequenceStepConfigure(ADC0_BASE, 2, 0, ADC_CTL_CH9|ADC_CTL_IE|ADC_CTL_END);
        ADCSequenceEnable(ADC0_BASE, 2);
        //Habilitar interrupción por parte del ADC
        ADCIntEnable(ADC0_BASE, 2);

        //Habilitar Temporizador 0
        SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER3);
            //Configurar temporizador como periódico
            TimerConfigure(TIMER3_BASE, TIMER_CFG_A_PERIODIC);
            //Cargar el valor que contará el temporizador
            TimerLoadSet(TIMER3_BASE, TIMER_A, SysCtlClockGet()/Fs);
            //Habilitar disparador de ADC por temporizador
            TimerControlTrigger(TIMER3_BASE, TIMER_A, true);
            TimerEnable(TIMER3_BASE, TIMER_A);

            //Habilitar ADC
            SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
            //Habilitar pin de entrada analógica
            SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
            GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_5);
            GPIOPadConfigSet(GPIO_PORTE_BASE, GPIO_PIN_5, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
            //Configurar secuencia de muestreo
            ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_TIMER, 1);
            ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_CH8|ADC_CTL_IE|ADC_CTL_END);
            ADCSequenceEnable(ADC0_BASE, 3);
            //Habilitar interrupción por parte del ADC
            ADCIntEnable(ADC0_BASE, 3);
}

void setupUART1(void){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1); //Habilitando el módulo UART1
    GPIOPinTypeUART(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1); //Definiendo los pines para el UART
    GPIOPinConfigure(GPIO_PB0_U1RX); //Definiendo pinB0 como RX
    GPIOPinConfigure(GPIO_PB1_U1TX); //Definiendo pinB1 como TX

    UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 115200, (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE)); //Configurando el UART1 con 115200 de baudrate, 8 bits, un dato y sin paridad
    UARTEnable(UART1_BASE); //Iniciando el UART1
}


void ObtenerMuestra(){
    ADCIntClear(ADC0_BASE, 0);
    ADCSequenceDataGet(ADC0_BASE, 0, &s);
    if (s > 2100){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,10);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_5, GPIO_PIN_5);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_4, 0);
        parqueo1 = 0;
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,0);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_5, 0);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_PIN_4);
        parqueo1 = 1;
    }

}

void ObtenerMuestra2(){
    ADCIntClear(ADC0_BASE, 1);
    ADCSequenceDataGet(ADC0_BASE, 1, &s);
    if (s > 2100){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,4);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_7, GPIO_PIN_7);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_6, 0);
        parqueo2 = 0;
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,0);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_7, 0);
        GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_6, GPIO_PIN_6);
        parqueo2 = 1;
    }
}

void ObtenerMuestra3(){
    ADCIntClear(ADC0_BASE, 2);
    ADCSequenceDataGet(ADC0_BASE, 2, &s);
    if (s > 2100){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,7);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_5, GPIO_PIN_5);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_4, 0);
        parqueo3 = 0;
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,0);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_5,0);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_4, GPIO_PIN_4);
        parqueo3 = 1;
    }
}

void ObtenerMuestra4(){
    ADCIntClear(ADC0_BASE, 3);
    ADCSequenceDataGet(ADC0_BASE, 3, &s);
    if (s > 2100){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,9);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_7, GPIO_PIN_7);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, 0);
        parqueo4 = 0;
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,0);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_7,0);
        GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, GPIO_PIN_6);
        parqueo4 = 1;
    }
}


void delay(uint32_t ms){
    for (i = 0; i < ms; i++){       //Ejecutar n mero de veces del argumento
        delay1ms();                 //Llamar a funci n de 1ms
    }
}

void delay1ms(void){
    SysTickDisable();               //Deshabilitar el SysTick
    SysTickPeriodSet(40000-1);      //Por aproximadamente 1ms
    SysTickEnable();                //Iniciar el set del periodo

    while((NVIC_ST_CTRL_R & NVIC_ST_CTRL_COUNT) == 0); //Mientras el bit de count sea 0 no hacer nada
}
