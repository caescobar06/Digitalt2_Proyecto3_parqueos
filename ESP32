/*************************************************************************************************
  ESP32 Web Server
  Ejemplo de creación de Web server 
  Basándose en los ejemplos de: 
  https://lastminuteengineers.com/creating-esp32-web-server-arduino-ide/
  https://electropeak.com/learn
**************************************************************************************************/
//************************************************************************************************
// Librerías
//************************************************************************************************
#include <WiFi.h>
#include <WebServer.h>
#include <LiquidCrystal_I2C.h>
//************************************************************************************************
// Variables globales
//************************************************************************************************
// SSID & Password
const char* ssid = "Tech_D0016304";  // Enter your SSID here  
const char* password = "VPPEEGGV";  //Enter your Password here

WebServer server(80);  // Object of WebServer(HTTP port, 80 is defult)

#define LED1pin 2

//DEFINICIÓN DE VARIABLES PARA CONTROLAR LOS ESTADOS DE LOS PARQUEOS
#define PQ2 25 
uint8_t PQ2_v = 0; //VALOR DEL PARQUEO

#define redp1 23
#define greenp1 22

//DEFINICIÓN DE VARIABLES GLOBALES
int primerBit = 0;
int segundoBit = 0;
int tercerBit = 0;
int cuartoBit = 0 ;
int quintoBit = 0;
int sextoBit = 0;
int septimoBit =0;
int octavoBit =0;

//VARIABLES PARA EL UART
int receivedChar1;
int receivedChar2=0; 

int totalByte, number; //total byte concatena para la LCD, number sirve para determinar que número 

// set the LCD number of columns and rows
int lcdColumns = 16;
int lcdRows = 2;

//VARIABLES PARA LA LDC
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);  //21-SDA y 22-SCL

byte pin[] = {15,2,4,5,18,19,23};   //   Seven segment pin is connected to Digital pin 15,2,4,5,18,19,21 to a,b,c,d,e,f,g

const byte count[10] = {  // this is data code for Seven segment 
  //GFEDCBA
  0b11000000,  //0
  0b11111001, // 1
  0b00100100, // 2
  0b10110000, //3
  0b10011001,  //4
  0b10010010,  //5
  0b10000010,  //6
  0b11111000,  //7
  0b10000000   //8


};

bool LED1status = LOW;

//************************************************************************************************
// Configuración
//************************************************************************************************
void setup() {
  pinMode(pin[0], OUTPUT);  // every pin is output
  pinMode(pin[1], OUTPUT);
  pinMode(pin[2], OUTPUT);
  pinMode(pin[3], OUTPUT);
  pinMode(pin[4], OUTPUT);
  pinMode(pin[5], OUTPUT);
  pinMode(pin[6], OUTPUT);

  // initialize LCD
  lcd.init();
  // turn on LCD backlight                      
  lcd.backlight();

  Serial.begin(115200); //INICIALIZACIÓN DEL UART
  Serial1.begin(115200, SERIAL_8N1, 32, 33, false, 20000UL, 112); //Habilitar el UART1 y cambiar los pins
  Serial2.begin(115200, SERIAL_8N1, 16,17, false,2000UL,112); //HABILITAR EL UART 2 

  Serial.print("Try Connecting to ");
  Serial.println(ssid); //SE CONECTARÁ A LA RED ESTABLECIDA

  pinMode(LED1pin, OUTPUT); //LED 1 COMO SALIDA
  pinMode(PQ2, INPUT_PULLUP); //EL PIN PQ2 COMO ENTRADA

  pinMode(redp1, OUTPUT); //LED 1 COMO SALIDA
  pinMode(greenp1, OUTPUT); //LED 1 COMO SALIDA

  // Connect to your wi-fi modem
  WiFi.begin(ssid, password); //INICIALIZA EL WIFI CON EL PASSWORD Y LA RED

  // Check wi-fi is connected to wi-fi network
  while (WiFi.status() != WL_CONNECTED) { //ESPERAR A QUE SE CONECTE
    delay(1000);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected successfully");//MUESTRA QUE SE HA CONECTADO EXISTOSAMENTE
  Serial.print("Got IP: ");//MUESTRA UN MENSAJE DE OBTENER IP
  Serial.println(WiFi.localIP());  //MUESTRA LA DIRECCIÓN IP DE LA ESP32

  //server.on("/", handle_OnConnect); // Directamente desde e.g. 192.168.0.8
  server.on("/led1on", handle_led1on);//DIRECCIONES QUE ESTÁN DISPONIBLES EN EL SERVIDOR
  server.on("/led1off", handle_led1off);
  server.on("/", handle_led1off);//DIRECCIÓN PRINCIPAL, SOBRE QUE SE QUIERE QUE SE HAGA

  server.onNotFound(handle_NotFound);//EN TAL CASO QUE NO ENCUENTRE EL SERVIDOR O UNA FUNCIÓN QUE NO ESTÁ

  server.begin();//INICIALIZA EL SERVIDOR
  Serial.println("HTTP server started");
  delay(100);
}
//************************************************************************************************
// loop principal
//************************************************************************************************
void loop() {
  server.handleClient(); //MANEJA TODOS LOS CLIENTES, FUNDAMENTAL PARA QUE VARIOS CLIENTES EXISTAN
  if (LED1status)
  {
    digitalWrite(LED1pin, HIGH);
  }
  else
  {
    digitalWrite(LED1pin, LOW);
  }
  
  PQ2_v = digitalRead(PQ2); //OBTIENE EL VALOR DEL PARQUEO 2
  //Serial.println(PQ2_v);

  if (Serial1.available()) {
    receivedChar1 = Serial1.read();  // Lee un carácter del UART1
    //Serial.println(receivedChar);         // Envía el carácter al monitor serial
    primerBit = (receivedChar1 >> 0) & 1; // Extrae el primer bit
    segundoBit = (receivedChar1 >> 1) & 1; // Extrae el segundo bit
    tercerBit = (receivedChar1 >> 2) & 1; // Extrae el tercer bit
    cuartoBit = (receivedChar1 >> 3) & 1; // Extrae el cuatro bit
    Serial.print("Primer bit: "); // Imprime el resultado (1 o 0)
    Serial.print(primerBit); // Imprime el resultado (1 o 0)
    Serial.print(" Segundo bit: "); // Imprime el resultado (1 o 0)
    Serial.print(segundoBit); // Imprime el resultado (1 o 0)
    Serial.print(" Tercer bit: "); // Imprime el resultado (1 o 0)
    Serial.print(tercerBit); // Imprime el resultado (1 o 0)
    Serial.print(" Cuartro bit: "); // Imprime el resultado (1 o 0)
    Serial.println(cuartoBit); // Imprime el resultado (1 o 0)
  }

  if (Serial2.available()) {
    receivedChar2 = Serial2.read();  // Lee un carácter del UART1
    //Serial.println(receivedChar);         // Envía el carácter al monitor serial
    quintoBit = (receivedChar2 >> 0) & 1; // Extrae el primer bit
    sextoBit = (receivedChar2 >> 1) & 1; // Extrae el segundo bit
    septimoBit = (receivedChar2 >> 2) & 1; // Extrae el tercer bit
    octavoBit = (receivedChar2 >> 3) & 1; // Extrae el cuatro bit
    Serial.print("Quinto bit: "); // Imprime el resultado (1 o 0)
    Serial.print(quintoBit); // Imprime el resultado (1 o 0)
    Serial.print(" Sexto bit: "); // Imprime el resultado (1 o 0)
    Serial.print(sextoBit); // Imprime el resultado (1 o 0)
    Serial.print(" Septimo bit: "); // Imprime el resultado (1 o 0)
    Serial.print(septimoBit); // Imprime el resultado (1 o 0)
    Serial.print(" Octavo bit: "); // Imprime el resultado (1 o 0)
    Serial.println(octavoBit); // Imprime el resultado (1 o 0)
  }

  //*************************************PARTE DE LA LDC**************************************************
  totalByte = (receivedChar2<<4)|receivedChar1;

  //Serial.println(totalByte);

  number = 0;

  for(int a = 0; a < 8; a++) {
    if((bitRead(totalByte, a)) == 1) {
      number += 1;
    }
  }

  if(number == 8) {
    SevenSeg(count[8]);
  }
  else if(number == 7) {
    SevenSeg(count[7]);
  }
  else if(number == 6) {
    SevenSeg(count[6]);
  }
  else if(number == 5) {
    SevenSeg(count[5]);
  }
  else if(number == 4) {
    SevenSeg(count[4]);
  }
  else if(number == 3) {
    SevenSeg(count[3]);
  }
  else if(number == 2) {
    SevenSeg(count[2]);
  }
  else if(number == 1) {
    SevenSeg(count[1]);
  }
  else if(number == 0) {
    SevenSeg(count[0]);
  }

  // set cursor to first column, first row
    lcd.setCursor(0, 0);
    lcd.print("P1");
    lcd.setCursor(2, 0);
    lcd.print(bitRead(totalByte, 7));
    lcd.setCursor(4, 0);
    lcd.print("P2");
    lcd.setCursor(6, 0);
    lcd.print(bitRead(totalByte, 6));
    lcd.setCursor(8, 0);
    lcd.print("P3");
    lcd.setCursor(10, 0);
    lcd.print(bitRead(totalByte, 5));
    lcd.setCursor(12, 0);
    lcd.print("P4");
    lcd.setCursor(14, 0);
    lcd.print(bitRead(totalByte, 4));

    lcd.setCursor(0, 1);
    lcd.print("P5");
    lcd.setCursor(2, 1);
    lcd.print(bitRead(totalByte, 3));
    lcd.setCursor(4, 1);
    lcd.print("P6");
    lcd.setCursor(6, 1);
    lcd.print(bitRead(totalByte, 2));
    lcd.setCursor(8, 1);
    lcd.print("P7");
    lcd.setCursor(10, 1);
    lcd.print(bitRead(totalByte, 1));
    lcd.setCursor(12, 1);
    lcd.print("P8");
    lcd.setCursor(14, 1);
    lcd.print(bitRead(totalByte, 0));

    delay(10);
  //*******************************************************************************************************

}
//************************************************************************************************
// Handler de Inicio página
//************************************************************************************************
void handle_OnConnect() {
  LED1status = LOW;
  Serial.println("GPIO2 Status: OFF");
  server.send(200, "text/html", SendHTML(LED1status));
}
//************************************************************************************************
// Handler de led1on
//************************************************************************************************
void handle_led1on() {
  LED1status = HIGH; //ENCIENDE EL LED
  Serial.println("GPIO2 Status: ON"); //INDICA QUE SE ENCENDIO
  server.send(200, "text/html", SendHTML(LED1status)); //ENVÍAR FUNCIÓN DE ÉXITO EN HTML, EN EL SEND HTML ENVÍA LA PÁGINA
}
//************************************************************************************************
// Handler de led1off
//************************************************************************************************
void handle_led1off() {
  LED1status = LOW;
  Serial.println("GPIO2 Status: OFF");
  server.send(200, "text/html", SendHTML(LED1status));
}
//************************************************************************************************
// Procesador de HTML
//************************************************************************************************
  String SendHTML(uint8_t led1stat) {
  String ptr = "<!DOCTYPE html>\n";
  ptr += "<html lang=\"en\">\n";
  ptr += "<head>\n";
  ptr += "  <meta charset=\"UTF-8\">\n";
  ptr += "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n";
  ptr += "<meta http-equiv=\"refresh\" content=\"1\"> <!-- Actualiza la página cada 1 segundo -->\n";
  ptr += "  <style>\n";
  ptr += "    body {\n";
  ptr += "      font-family: Arial, sans-serif;\n";
  ptr += "      margin: 0;\n";
  ptr += "      padding: 0;\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    .top-bar {\n";
  ptr += "      background-color: #333; /* Gris oscuro */\n";
  ptr += "      height: 50px;\n";
  ptr += "      display: flex;\n";
  ptr += "      align-items: center;\n";
  ptr += "      justify-content: center;\n";
  ptr += "      color: white;\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    table {\n";
  ptr += "      width: 100%;\n";
  ptr += "      margin-top: 50px; /* Espacio de 50px debajo de la barra */\n";
  ptr += "      border-collapse: collapse;\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    th, td {\n";
  ptr += "      width: 200px;\n";
  ptr += "      height: 40px;\n";
  ptr += "      text-align: center;\n";
  ptr += "      vertical-align: middle;\n";
  ptr += "      border: 1px solid #ccc;\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    th {\n";
  ptr += "      background-color: #333; /* Gris oscuro */\n";
  ptr += "      color: white;\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    .occupied {\n";
  ptr += "      background-color: #FF0000; /* Rojo */\n";
  ptr += "      color: white;\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    .available {\n";
  ptr += "      background-color: #00FF00; /* Verde */\n";
  ptr += "      color: white;\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    .car-icon {\n";
  ptr += "      width: 20px; /* Ajusta el ancho de la imagen según sea necesario */\n";
  ptr += "      margin-left: 10px; /* Espacio entre el texto y la imagen del carro */\n";
  ptr += "    }\n";
  ptr += "\n";
  ptr += "    .cancel-icon {\n";
  ptr += "      width: 20px; /* Ajusta el ancho de la imagen según sea necesario */\n";
  ptr += "      margin-left: 10px; /* Espacio entre el texto y la imagen del icono de cancelación */\n";
  ptr += "    }\n";
  ptr += "  </style>\n";
  ptr += "  <title>Parqueos Disponibles</title>\n";
  ptr += "</head>\n";
  ptr += "<body>\n";
  ptr += "\n";
  ptr += "  <div class=\"top-bar\">\n";
  ptr += "    <h1>Parqueos Disponibles</h1>\n";
  ptr += "  </div>\n";
  ptr += "\n";
  ptr += "  <table>\n";
  ptr += "    <tr>\n";
  ptr += "      <th>Nivel 1</th>\n";
  ptr += "      <th>Nivel 2</th>\n";
  ptr += "    </tr>\n";
  ptr += "    <tr>\n";
  if (primerBit == 0)
  {
    ptr += "      <td class=\"available\">1-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (primerBit == 1)
  {
    ptr += "      <td class=\"occupied\">1-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }

  if (quintoBit == 0)
  {
    ptr += "      <td class=\"available\">5-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (quintoBit == 1)
  {
    ptr += "      <td class=\"occupied\">5-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }
 
  ptr += "    </tr>\n";
  ptr += "    <tr>\n";

  if (segundoBit== 0)
  {
    ptr += "      <td class=\"available\">2-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (segundoBit == 1)
  {
    ptr += "      <td class=\"occupied\">2-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }
  
  if (sextoBit == 0)
  {
    ptr += "      <td class=\"available\">6-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (sextoBit == 1)
  {
    ptr += "      <td class=\"occupied\">6-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }
  ptr += "    </tr>\n";
  ptr += "    <tr>\n";
  if (tercerBit == 0)
  {
    ptr += "      <td class=\"available\">3-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (tercerBit == 1)
  {
    ptr += "      <td class=\"occupied\">3-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }
  if (septimoBit == 0)
  {
    ptr += "      <td class=\"available\">7-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (septimoBit ==1)
  {
    ptr += "      <td class=\"occupied\">7-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }
  ptr += "    </tr>\n";
  ptr += "    <tr>\n";
  if (cuartoBit == 0)
  {
    ptr += "      <td class=\"available\">4-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (cuartoBit == 1)
  {
    ptr += "      <td class=\"occupied\">4-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }
  if (octavoBit == 0)
  {
    ptr += "      <td class=\"available\">8-Disponible <img class=\"car-icon\" src=\"https://w7.pngwing.com/pngs/712/861/png-transparent-car-computer-icons-car-driving-rectangle-car.png\" alt=\"Car Icon\"></td>\n";
  }
  else if (octavoBit == 1)
  {
    ptr += "      <td class=\"occupied\">8-Ocupado <img class=\"cancel-icon\" src=\"https://w7.pngwing.com/pngs/978/587/png-transparent-business-presentation-cancel-building-text-trademark-thumbnail.png\" alt=\"Cancel Icon\"></td>\n";
  }
  ptr += "    </tr>\n";
  ptr += "  </table>\n";
  ptr += "\n";
  ptr += "</body>\n";
  ptr += "</html>\n";

  return ptr;
}
//************************************************************************************************
// Handler de not found
//************************************************************************************************
void handle_NotFound() {
  server.send(404, "text/plain", "Not found"); //FUNCIÓN EN CASO DE ERROR 
}

void SevenSeg(byte Bit) { //  sending data on each pin
  for(int i=0; i<8; i++)
  digitalWrite(pin[i],bitRead(Bit,i));
}
